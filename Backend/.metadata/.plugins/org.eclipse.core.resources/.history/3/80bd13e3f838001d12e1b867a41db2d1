package com.javacode.Spring.Security.util;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.javacode.Spring.Security.domain.model.Role;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import lombok.extern.log4j.Log4j2;

@Component @Log4j2
public class JwtTokenUtil {

	public static final long JWT_TOKEN_VALIDITY = 24 * 30 * 60 * 60;

	@Value("${jwt.secret}")
	private String secret;

	public String getUsernameFromToken(String token) {
		return getClaimFromToken(token, Claims::getSubject);
	}

	public Date getIssuedAtDateFromToken(String token) {
		return getClaimFromToken(token, Claims::getIssuedAt);
	}

	public Date getExpirationDateFromToken(String token) {
		return getClaimFromToken(token, Claims::getExpiration);
	}

	public <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {
		final Claims claims = getAllClaimsFromToken(token);
		return claimsResolver.apply(claims);
	}

	private Claims getAllClaimsFromToken(String token) {
		return Jwts.parser().setSigningKey(secret.getBytes()).parseClaimsJws(token).getBody();
	}

	private Boolean isTokenExpired(String token) {
		final Date expiration = getExpirationDateFromToken(token);
		return expiration.before(new Date());
	}

	private Boolean ignoreTokenIxpiration(String token) {
		return false;
	}

	public String generateToken(UserDetails userDetails) {
		log.info(userDetails.toString());
		Map<String, Object> claims = new HashMap<>();
		return doGenerateToken(claims, userDetails);
	}

	private String doGenerateToken(Map<String, Object> claims, UserDetails subject) {
//		String tokesn = JWT.c

//		return JWT.create()
//				.withSubject(subject.getUsername())
//				.withExpiresAt((new Date(System.currentTimeMillis() + JWT_TOKEN_VALIDITY * 1000)))
//				.withIssuer(null)
//				.withClaim("roles", subject.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList()))
//				.sign(Algorithm.("scret".getBytes()));
		claims.put("roles", new Role(Role.AUTHOR_ADMIN));
		
		
		return Jwts.builder()
//				.setClaims(subject.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList()))
				.setClaims(claims)
				.setSubject(subject.getUsername())
				.setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis() + JWT_TOKEN_VALIDITY * 1000))
				.signWith(SignatureAlgorithm.HS512, secret.getBytes())
				.compact();
	}

	public Boolean canTokenBeRefreshed(String token) {
		return (!isTokenExpired(token) || ignoreTokenIxpiration(token));
	}

	public Boolean validateToken(String token, UserDetails userDetails) {
		final String username = getUsernameFromToken(token);
		return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
	}

}
