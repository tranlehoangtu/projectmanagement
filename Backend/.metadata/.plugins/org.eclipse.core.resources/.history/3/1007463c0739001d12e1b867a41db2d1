package com.javacode.Spring.Security.api;

import org.springframework.beans.BeanUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.javacode.Spring.Security.domain.dto.AuthRequest;
import com.javacode.Spring.Security.domain.dto.AuthResponse;
import com.javacode.Spring.Security.domain.model.User;
import com.javacode.Spring.Security.util.JwtTokenUtil;

import lombok.RequiredArgsConstructor;

@RestController @RequestMapping(path = "api/login")
@CrossOrigin
@RequiredArgsConstructor
public class AuthApi {

    private final AuthenticationManager authenticationManager;
    private final JwtTokenUtil jwtTokenUtil;

    @PostMapping()
    public ResponseEntity<AuthResponse> login(@RequestBody AuthRequest request ) {
        try {
            Authentication authenticate = authenticationManager
                .authenticate(
                    new UsernamePasswordAuthenticationToken(
                        request.getUsername(), request.getPassword()
                    )
                );

            User user = (User) authenticate.getPrincipal();
            String jwtToken = jwtTokenUtil.generateToken(user);
            
            AuthResponse authResponse = new AuthResponse();
            
            BeanUtils.copyProperties(user, authResponse);
            authResponse.setJwtToken(jwtToken);
            
            
            return ResponseEntity.ok()
                .header(
                    HttpHeaders.AUTHORIZATION,
                    jwtToken
                )
                .body(authResponse);
        } catch (BadCredentialsException ex) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
    }

}
