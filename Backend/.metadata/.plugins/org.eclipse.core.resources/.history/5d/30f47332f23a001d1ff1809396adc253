package com.javacode.Spring.Security.api;

import javax.annotation.security.RolesAllowed;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.javacode.Spring.Security.domain.dto.ListOfString;
import com.javacode.Spring.Security.domain.model.Project;
import com.javacode.Spring.Security.domain.model.Role;
import com.javacode.Spring.Security.service.ProjectService;

import lombok.RequiredArgsConstructor;

@CrossOrigin
@RequiredArgsConstructor
@RestController
@RequestMapping("api")
public class ProjectApi {
	private final ProjectService projectService;

	@RolesAllowed({Role.STUDENT, Role.MANAGEMENT})
	@GetMapping("project/{id}")
	public ResponseEntity<Project> getProject(@PathVariable(name = "id") String id) {
		return projectService
				.findByProjectId(id)
				.map(project -> ResponseEntity.ok().body(project))
				.orElseGet(() -> ResponseEntity.notFound().build());
	}
	
	@RolesAllowed({Role.MANAGEMENT, Role.ADMIN})
	@PutMapping("project")
	public ResponseEntity<Project> updateProject(@RequestParam("members") boolean members) {
		System.out.println(members);
		
		
		return null;
	}
}