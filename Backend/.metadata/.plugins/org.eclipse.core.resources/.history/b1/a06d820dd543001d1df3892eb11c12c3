package com.javacode.Spring.Security.api;

import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.BeanUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.javacode.Spring.Security.domain.dto.AuthRequest;
import com.javacode.Spring.Security.domain.dto.AuthResponse;
import com.javacode.Spring.Security.domain.dto.RegisterRequest;
import com.javacode.Spring.Security.domain.dto.RegisterResponse;
import com.javacode.Spring.Security.domain.model.Role;
import com.javacode.Spring.Security.domain.model.User;
import com.javacode.Spring.Security.service.UserService;
import com.javacode.Spring.Security.util.JwtTokenUtil;

import lombok.RequiredArgsConstructor;

@RequestMapping("api/")
@RequiredArgsConstructor
@RestController
@CrossOrigin
public class UserApi {
	private final UserService userService;
	private final AuthenticationManager authenticationManager;
	private final JwtTokenUtil jwtTokenUtil;

	@GetMapping("user/{id}")
	public ResponseEntity<User> getUser(@PathVariable(name = "id") String id) {
		return userService.findById(id).map(user -> ResponseEntity.ok().body(user))
				.orElseGet(() -> ResponseEntity.ok(null));
	}

	@GetMapping("user")
	public ResponseEntity<List<User>> getUserContaining(@RequestParam("username") String username) {
		
//		return ResponseEntity.ok().body(userService.findByUsernameContaining(username));
		System.out.println(username);
		return null;
	}

	@PostMapping("admin/login")
	public ResponseEntity<AuthResponse> login(@RequestBody AuthRequest request) {
		try {
			Authentication authenticate = authenticationManager.authenticate(
					new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPassword()));

			User user = (User) authenticate.getPrincipal();
			Optional<Role> role = user.getAuthorities().stream().findFirst();
			
			if(!role.get().getAuthority().equals("ROLE_ADMIN")) {
				return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
			}
			
			String jwtToken = jwtTokenUtil.generateToken(user);
			AuthResponse authResponse = new AuthResponse();

			BeanUtils.copyProperties(user, authResponse);
			authResponse.setJwt(jwtToken);

			return ResponseEntity.ok().header(HttpHeaders.AUTHORIZATION, jwtToken).body(authResponse);
		} catch (BadCredentialsException ex) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
		}
	}
	
	@PostMapping("admin/register")
	public ResponseEntity<RegisterResponse> registerAdmin(@RequestBody RegisterRequest registerRequest) {
		Optional<User> optUser = userService.findByUsername(registerRequest.getUsername());
		RegisterResponse response = new RegisterResponse();

		if (optUser.isPresent()) {
			response.setMessage("Tên đăng nhập đã tồn tại");
			response.setIsSuccess(false);
			return ResponseEntity.ok().body(response);
		}

		if (isNumeric(String.valueOf(registerRequest.getUsername())) || containSpace(registerRequest.getUsername())) {
			response.setMessage("Tên đăng nhập không hợp lệ");
			response.setIsSuccess(false);
			return ResponseEntity.ok().body(response);
		}

		if (!registerRequest.getPassword().equals(registerRequest.getRepassword())) {
			response.setMessage("Mật khẩu không giống nhau !");
			response.setIsSuccess(false);
			return ResponseEntity.ok().body(response);
		}

		User user = new User();

		user.setUsername(registerRequest.getUsername());
		user.setFullName(registerRequest.getUsername());
		user.setPassword(registerRequest.getPassword());
		user.setAuthorities(Set.of(new Role(Role.ADMIN)));
		user.setCreatedAt(new Date());
		user.setModifiedAt(new Date());

		userService.insertUser(user);

		response.setIsSuccess(true);
		return ResponseEntity.ok().body(response);
	}

	private boolean isNumeric(String strNum) {
		if (strNum == null) {
			return false;
		}
		try {
			Double.parseDouble(strNum);
		} catch (NumberFormatException nfe) {
			return false;
		}
		return true;
	}

	private boolean containSpace(String s) {
		int len = s.length();
		for (int i = 0; i < len; i++) {
			if (s.charAt(i) == ' ') {
				return true;
			}
		}

		return false;
	}
}
