package com.javacode.Spring.Security.api;

import java.util.Date;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.BeanUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.javacode.Spring.Security.domain.dto.AuthRequest;
import com.javacode.Spring.Security.domain.dto.AuthResponse;
import com.javacode.Spring.Security.domain.dto.RegisterRequest;
import com.javacode.Spring.Security.domain.dto.RegisterResponse;
import com.javacode.Spring.Security.domain.dto.UserUpdate;
import com.javacode.Spring.Security.domain.model.Role;
import com.javacode.Spring.Security.domain.model.User;
import com.javacode.Spring.Security.service.UserService;
import com.javacode.Spring.Security.util.JwtTokenUtil;

import lombok.RequiredArgsConstructor;

@RestController @RequestMapping(path = "api/auth")
@CrossOrigin
@RequiredArgsConstructor
public class AuthApi {

	private final UserService userService;
    private final AuthenticationManager authenticationManager;
    private final JwtTokenUtil jwtTokenUtil;

    @PostMapping("login")
    public ResponseEntity<AuthResponse> login(@RequestBody AuthRequest request ) {
        try {
            Authentication authenticate = authenticationManager
                .authenticate(
                    new UsernamePasswordAuthenticationToken(
                        request.getUsername(), request.getPassword()
                    )
                );

            User user = (User) authenticate.getPrincipal();
            String jwtToken = jwtTokenUtil.generateToken(user);
            
            AuthResponse authResponse = new AuthResponse();
            
            BeanUtils.copyProperties(user, authResponse);
            authResponse.setJwt(jwtToken);
            
            
            return ResponseEntity.ok()
                .header(
                    HttpHeaders.AUTHORIZATION,
                    jwtToken
                )
                .body(authResponse);
        } catch (BadCredentialsException ex) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
    }
    
    @PostMapping("register")
    public ResponseEntity<RegisterResponse> register(@RequestBody RegisterRequest registerRequest) {
    	Optional<User> optUser = userService.findByUsername(registerRequest.getUsername());
    	RegisterResponse response = new RegisterResponse();
    	
    	if(optUser.isPresent()) {
    		response.setMessage("Tên đăng nhập đã tồn tại");
    		response.setIsSuccess(false);
    		return ResponseEntity.ok().body(response);
    	}
    	
    	if(isNumeric(String.valueOf(registerRequest.getUsername()))) {
    		response.setMessage("Tên đăng nhập không hợp lệ");
    		response.setIsSuccess(false);
    		return ResponseEntity.ok().body(response);
    	}
    	
    	if(!registerRequest.getPassword().equals(registerRequest.getRepassword())) {
    		response.setMessage("Mật khẩu không giống nhau !");
    		response.setIsSuccess(false);
    		return ResponseEntity.ok().body(response);
    	}
    	
    	
    	User user = new User();
    	
    	user.setUsername(registerRequest.getUsername());
    	user.setFullName(registerRequest.getUsername());
    	user.setPassword(registerRequest.getPassword());
    	user.setAuthorities(registerRequest.getPosition().equals("teacher") ? Set.of(new Role(Role.MANAGEMENT)) : Set.of(new Role(Role.STUDENT)));
    	user.setCreatedAt(new Date());
    	user.setModifiedAt(new Date());
    	
    	userService.insertUser(user);
    	
    	response.setIsSuccess(true);
    	return ResponseEntity.ok().body(response);
    }
    
    @PutMapping("update")
    public ResponseEntity<User> update(@RequestBody UserUpdate userUpdate) {
    	
    	User nUser = userService.findByUsername(userUpdate.getUsername()).get();
    	BeanUtils.copyProperties(userUpdate, nUser);
    	
    	System.out.println(nUser.toString());

    	//    	return ResponseEntity.ok().body(userService.save(user)); 
    	
    	return null;
    }
    
    private boolean isNumeric(String strNum) {
        if (strNum == null) {
            return false;
        }
        try {
            Double.parseDouble(strNum);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }

}
