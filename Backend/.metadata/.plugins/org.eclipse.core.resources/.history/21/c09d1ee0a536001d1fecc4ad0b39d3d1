package com.javacode.project.service.impl;

import java.util.List;
import java.util.Optional;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.javacode.project.domain.User;
import com.javacode.project.repository.UserRepository;
import com.javacode.project.service.UserService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {
	private final UserRepository userRepository;
	private final BCryptPasswordEncoder bCryptPasswordEncoder;

	@Override
	public List<User> findAll() {
		return userRepository.findAll();
	}

	@Override
	public User userAuthenticate(String username, String password) {

		User tempUser = userRepository.findUserByUsername(username);

		if (tempUser != null && bCryptPasswordEncoder.matches(password, tempUser.getPassword())) {
			return tempUser;
		}

		return null;
	}

	@Override
	public void insert(User user) {
		user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
		userRepository.insert(user);
	}

	@Override
	public Optional<User> findById(String id) {
		return userRepository.findById(id);
	}

	public User findByUsername(String username) {
		return userRepository.findUserByUsername(username);
	}

}
