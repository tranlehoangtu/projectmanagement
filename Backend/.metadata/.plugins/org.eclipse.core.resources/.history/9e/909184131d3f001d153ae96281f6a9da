package com.javacode.Spring.Security.api;

import java.util.List;
import java.util.Map;

import javax.annotation.security.RolesAllowed;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.javacode.Spring.Security.domain.model.Comment;
import com.javacode.Spring.Security.domain.model.Role;
import com.javacode.Spring.Security.service.CommentService;
import com.javacode.Spring.Security.service.TaskService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("api")
@RequiredArgsConstructor
@CrossOrigin
public class CommentApi {
	private final CommentService commentService;
	private final TaskService taskService;

	@RolesAllowed({ Role.MANAGEMENT, Role.STUDENT })
	@GetMapping("comment/{id}")
	public ResponseEntity<Comment> getComment(@PathVariable("id") String id) {
		return ResponseEntity.ok().body(commentService.findById(id).get());
	}
	
	
	
	@RolesAllowed({ Role.MANAGEMENT, Role.STUDENT })
	@PostMapping("comment")
	public ResponseEntity<Comment> addComment(@RequestBody Map<String, Object> list) {
		ObjectMapper mapper = new ObjectMapper();
		String taskId = (String) list.get("taskId");
//		Comment comment = (Comment) list.get("comment");
		List<Comment> las = mapper.readValue(list.get("comment"), new TypeReference<List<Comment>>() {});;
		System.out.println(las);
		
		
		
//		Task task = taskService.findById(taskId).get();
//		Comment comment = (Comment) list.get("comment");
//		
//		task.getComments().add(comment.getId());
//		taskService.save(task);
		return ResponseEntity.ok().body(null);
//		return ResponseEntity.ok().body(commentService.insert(comment));
	}
}
