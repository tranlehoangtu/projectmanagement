package com.javacode.Spring.Security.api;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.javacode.Spring.Security.domain.model.User;
import com.javacode.Spring.Security.service.ProjectService;
import com.javacode.Spring.Security.service.UserService;

import lombok.RequiredArgsConstructor;

@RequestMapping("api/")
@RequiredArgsConstructor
@RestController
@CrossOrigin
public class UserApi {
	private final UserService userService;
	private final ProjectService projectService;
	
    @GetMapping("user/{id}")
    public ResponseEntity<User> getUser(@PathVariable(name = "id") String id) {
    	return userService
    				.findById(id)
    				.map(user -> ResponseEntity.ok().body(user))
    				.orElseGet(() -> ResponseEntity.ok(null));
    }
    
//    @GetMapping("user")
//    public ResponseEntity<?> getProjectsFromUser(@RequestParam(name = "id") String id, @RequestParam("value") String value) {
//    	User user = userService.findById(id).get();
//    	List<String> projectsId = user.getProjects();
//    	
//    	switch (value) {
//		case "projects": {
//			return ResponseEntity.ok().body(projectService.getProjectsFromList(projectsId));
//		}
//		default:
//			throw new IllegalArgumentException("Unexpected value: " + value);
//		}
    	
//    	return userService
//    				.findById(id)
//    				.map(user -> ResponseEntity.ok().body(user))
//    				.orElseGet(() -> ResponseEntity.ok(null));
    }
}
