package com.javacode.Spring.Security.api;

import java.util.List;
import java.util.stream.Collectors;

import javax.annotation.security.RolesAllowed;

import org.springframework.beans.BeanUtils;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.javacode.Spring.Security.domain.dto.CommentReq;
import com.javacode.Spring.Security.domain.model.Comment;
import com.javacode.Spring.Security.domain.model.Role;
import com.javacode.Spring.Security.domain.model.Task;
import com.javacode.Spring.Security.service.CommentService;
import com.javacode.Spring.Security.service.TaskService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("api")
@RequiredArgsConstructor
@CrossOrigin
public class CommentApi {
	private final CommentService commentService;
	private final TaskService taskService;

	@RolesAllowed({ Role.MANAGEMENT, Role.STUDENT })
	@GetMapping("comment/{id}")
	public ResponseEntity<Comment> getComment(@PathVariable("id") String id) {
		return ResponseEntity.ok().body(commentService.findById(id).get());
	}

	@RolesAllowed({ Role.MANAGEMENT, Role.STUDENT })
	@PostMapping("comment")
	public ResponseEntity<Comment> addComment(@RequestBody CommentReq commentReq) {
		Comment comment = new Comment();
		BeanUtils.copyProperties(commentReq, comment);
		
		System.out.println(comment.getCreateAt());
		System.out.println(comment.getEditAt());
		
		Comment insertedComment = commentService.insert(comment);

		Task task = taskService.findById(commentReq.getTaskId()).get();
		task.getComments().add(insertedComment.getId());
		
		taskService.save(task);
		return ResponseEntity.ok().body(insertedComment);
	}
	
	@RolesAllowed({ Role.MANAGEMENT, Role.STUDENT })
	@PutMapping("comment")
	public ResponseEntity<Comment> updateComment(@RequestBody Comment comment) {
		return ResponseEntity.ok().body(commentService.save(comment));
	}
	
	@RolesAllowed({ Role.MANAGEMENT, Role.STUDENT })
	@DeleteMapping("comment")
	public ResponseEntity<Task> deleteComment(@RequestBody CommentReq commentReq) {
		Comment comment = new Comment();
		BeanUtils.copyProperties(commentReq, comment);
		
		Task task = taskService.findById(commentReq.getTaskId()).get();

		List<String> uniqueValues = getUniqueValues(task.getComments(), List.of(comment.getId()));
		task.setComments(uniqueValues);
		taskService.save(task);
		
		commentService.delete(comment);
		
		return ResponseEntity.ok().body(taskService.save(task));
	}
	
	private List<String> getUniqueValues(List<String> firstList, List<?> secondList) {
		return firstList.stream().filter(item -> !secondList.contains(item)).collect(Collectors.toList());
	}
}
